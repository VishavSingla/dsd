----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    11:35:41 04/05/2023 
-- Design Name: 
-- Module Name:    fsm - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity fsm is
    Port ( clk,rst,x : in  STD_LOGIC;
           z : out  STD_LOGIC);
end fsm;

architecture Behavioral of fsm is
type mealy_state is (s0,s1,s2);
signal reg_ps,reg_ns:mealy_state;

begin

 process(rst,clk)
  begin
    if (rst='1') then
	   reg_ps<=s0;
	elsif(clk'event and clk='1') then
	 reg_ps<=reg_ns;
	 end if;
	end process;
	
 process(x,reg_ps)
  begin 
   case reg_ps is
	 when s0=>
	  if(x='0') then
	    reg_ns<=s1;
		 else
		 reg_ns<=s2;
		 end if;
		 
	 when s1=>
	  if(x='0') then
	    reg_ns<=s1;
		 else
		 reg_ns<=s2;
		 end if;
	 when s2=>
	  if(x='0') then
	    reg_ns<=s1;
		 else
		 reg_ns<=s2;
		 end if;    
  when others=>
    reg_ns<=s0;
 end case;
end process;

 process(x,reg_ps)
   begin
	 case reg_ps is
	 
	  when s1=>
	   if(x='0') then
		  z<='0';
		  else
		  z<='1';
		end if;
	  when s2=>
	   if(x='0') then
		  z<='1';
		  else
		  z<='0';
      end if;
   when others=>
     z<='0';
  end case;
 end process;
end Behavioral;
--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   12:02:10 04/05/2023
-- Design Name:   
-- Module Name:   C:/Users/student/fsm/fsm_tb.vhd
-- Project Name:  fsm
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: fsm
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY fsm_tb IS
END fsm_tb;
 
ARCHITECTURE behavior OF fsm_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT fsm
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         x : IN  std_logic;
         z : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';
   signal x : std_logic := '0';

 	--Outputs
   signal z : std_logic;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: fsm PORT MAP (
          clk => clk,
          rst => rst,
          x => x,
          z => z
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
     rst<='1'; wait for 5 ns;
	  rst<='0';
	  
	  x<='0'; wait until falling_edge(clk);
	  x<='0'; wait until falling_edge(clk);
	  x<='1'; wait until falling_edge(clk);
	  x<='1'; wait until falling_edge(clk);
	  x<='0'; wait until falling_edge(clk);
	  x<='1'; wait until falling_edge(clk);
	  x<='0'; wait until falling_edge(clk);
	  x<='0'; wait until falling_edge(clk);
	  x<='1'; wait until falling_edge(clk);
	  x<='0'; wait until falling_edge(clk);
      wait;
   end process;

END;